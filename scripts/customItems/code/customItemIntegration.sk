
import:
    org.bukkit.Bukkit
    org.bukkit.inventory.SmithingTrimRecipe
    org.bukkit.inventory.ShapedRecipe
    org.bukkit.inventory.RecipeChoice

# item > id
# Get the id of any item
function getId(item:item) :: string:
    set {_id} to (string tag "customId" of (custom nbt of {_item}))
    return {_id} if {_id} is set else (raw name of {_item})

# id/item > custom/updated item
function getItem(item:object) :: item:
    if (skript type of {_item}) is "text":
        set {_id} to namespaced key from {_item}
        if {-customItems::%{_id}%} is set:
            return {-customItems::%{_id}%}
        else if (itemtype from key {_id}) is set:
            return itemtype from key {_id}
        else:
            log error "getItem() called with unknown custom item id '%{_id}%'"
    else if (skript type of {_item}) is "item type":
        return updateItem({_item})
    log warn "getItem() found no item for '%{_id}%' (%skript type of {_item}%), returning self"
    return {_item}

on consume with priority lowest:
    (boolean tag "infinite" of (custom nbt of event-item)) is true
    event.setReplacement(event-item)

# Update recipes (needs to be updated for PredicateChoice when it's implemented)
function customItemsUpdateAllRecipes():
    ###
    log info "‚Äçüî• Updating all recipes..."
    Bukkit.resetRecipes()
    loop all recipes:
        updateRecipe(loop-value)
        if mod(loop-iteration,100) is 0:
            wait 1 tick
    delete {-ingredients::*}
    log info "Finished updating all ¬ßb%size of all recipes% ¬ßrrecipes!"
    ###
    wait 1 tick
    call custom event "recipesReady"
    unlock recipes all recipes for all players
    update server recipes

# Update recipes function
local function updateRecipe(id:string) :: object:
    set {_key} to namespaced key from {_id}
    set {_recipe} to Bukkit.getRecipe({_key})
    set {_result} to updateItem(result of recipe {_id})
    set {_type} to str(recipe type of recipe {_id})
    if {_type} is "furnace_recipe":
        register furnace recipe:
            id: {_id}
            result: {_result}
            input: {_recipe}.getInputChoice()
            group: {_recipe}.getGroup()
            cooktime: cooktime of recipe {_id}
            experience: experience of recipe {_id}
            category: str({_recipe}.getCategory())
    else if {_type} is "smoking_recipe":
        register smoking recipe:
            id: {_id}
            result: {_result}
            input: {_recipe}.getInputChoice()
            group: {_recipe}.getGroup()
            cooktime: cooktime of recipe {_id}
            experience: experience of recipe {_id}
            category: str({_recipe}.getCategory())
    else if {_type} is "blasting_recipe":
        register blasting recipe:
            id: {_id}
            result: {_result}
            input: {_recipe}.getInputChoice()
            group: {_recipe}.getGroup()
            cooktime: cooktime of recipe {_id}
            experience: experience of recipe {_id}
            category: str({_recipe}.getCategory())
    else if {_type} is "campfire_recipe":
        register campfire recipe:
            id: {_id}
            result: {_result}
            input: {_recipe}.getInputChoice()
            cooktime: cooktime of recipe {_id}
            experience: experience of recipe {_id}
    else if {_type} is "shaped_recipe":
        set {_newrecipe} to new ShapedRecipe({_id}, {_result})
        {_newrecipe}.shape(...{_recipe}.getShape())
        {_newrecipe}.setGroup({_recipe}.getGroup())
        {_newrecipe}.setCategory({_recipe}.getCategory())
        set {_map} to {_recipe}.getChoiceMap()
        set {_chars::*} to ...{_map}.keySet()
        loop {_chars::*}:
            set {_char} to loop-value
            loop ...{_map}.get({_char}).getChoices():
                set {_material} to loop-value-2
                set {_item} to {_material}.asItemType().createItemStack()
                add updateItem({_item}) to {_choices::*}
            set {_choice} to new RecipeChoice.ExactChoice([{_choices::*}])
            {_newrecipe}.setIngredient({_char}, {_choice})
    else if {_type} is "shapeless_recipe":
        set {_ingredients::*} to ...{_recipe}.getChoiceList()
        register shapeless recipe:
            id: {_id}
            result: {_result}
            group: {_recipe}.getGroup()
            category: str({_recipe}.getCategory())
            ingredients:
                loop {_ingredients::*}:
                    add loop-value to ingredients
    else if {_recipe} is instance of SmithingTrimRecipe:
        pass
    else if {_type} is "smithing_recipe":
        register smithing recipe:
            id: {_id}
            result: {_result}
            template: {_recipe}.getTemplate()
            base: {_recipe}.getBase()
            addition: {_recipe}.getAddition()
            copynbt: {_recipe}.willCopyNbt()
    else if {_type} is "stonecutting_recipe":
        register stonecutting recipe for {_result} with ingredient {_recipe}.getInputChoice() with id {_id} in group {_recipe}.getGroup()
    else if {_type} is "complex_recipe":
        pass # too complex B)
    else:
        log error "Unknown recipe type %{_type}% for recipe %{_id}%"
    return {_newrecipe}
