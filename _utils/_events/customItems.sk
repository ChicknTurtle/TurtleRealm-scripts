
options:
    chunkTimeout: 2

import:
    org.bukkit.inventory.InventoryHolder

# Called when custom recipes are ready to be load
event "recipesReady":
    patterns:
        [on|when] recipe[s] [are] ready [to load]
        [on|when] ready [to] load recipe[s]

# Called when an inventory slot loads
event "slotLoad":
    patterns:
        [on] [inv[entory]] (item|slot) load[ed]
    event-values: item, inventory, integer, string

local function callEvent(item:item, inv:inventory, slot:integer, source:string=""):
    if {_item} isn't set:
        if {_source} is "player join":
            {_slot} >= 36
            {_slot} <= 39
            exit 2 sections
        log error "Item unset when calling for slot %{_slot}% of %{_inv}%"
        exit trigger
    {_item} isn't air
    set {_event-values::item} to {_item}
    set {_event-values::inventory} to {_inv}
    set {_event-values::integer} to {_slot}
    set {_event-values::text} to {_source}
    call custom event "slotLoad" using event-values {_event-values::*}

function loadChunkSlots(chunk:chunk):
    set {_start} to now
    set {_totalslots} to 0
    set {_blocks::*} to (...{_chunk}.getTileEntities(true)) where [inventory of input is set]
    set {_blocks::*} to {_blocks::*} where [input doesn't have a loottable]
    set {_entities::*} to ((...{_chunk}.getEntities()) where [input is an instance of InventoryHolder]) where [input isn't a player]
    loop {_blocks::*}:
        set {_inv} to inventory of loop-value
        loop (amount of slots of {_inv}) times:
            set {_slot} to (loop-value-2) - 1
            set {_item} to (slot {_slot} of {_inv})
            callEvent({_item}, {_inv}, {_slot}, "load chunk block")
        if seconds of (time since {_start}) > {@chunkTimeout}:
            log error "%{_chunk}% took too long to load slots (%(chunk x of {_chunk})*16% ~ %(chunk z of {_chunk})*16%)"
            exit trigger
    loop {_entities::*}:
        set {_inv} to loop-value.getInventory()
        loop (amount of slots of {_inv}) times:
            set {_slot} to (loop-value-2) - 1
            set {_item} to (slot {_slot} of {_inv})
            callEvent({_item}, {_inv}, {_slot}, "load chunk entity")
        if seconds of (time since {_start}) > {@chunkTimeout}:
            log error "%{_chunk}% took too long to load slots (%(chunk x of {_chunk})*16% ~ %(chunk z of {_chunk})*16%)"
            exit trigger

# chunk loading
on chunk load:
    loadChunkSlots(event-chunk)

# chest loot generating
on loot generate:
    loop loot:
        add updateItem(loop-value) to {_newloot::*}
    set loot to {_newloot::*}
    # can't really call event here, since no inventory

# player joining
on join:
    loop (amount of slots of player's inventory) times:
        set {_item} to (slot (loop-value)-1 of player's inventory)
        callEvent({_item}, player's inventory, (loop-value)-1, "player join")

# creative inv, /give etc
on inventory slot change:
    gamemode of player isn't creative # messes with cursor slot in creative
    set {_slot} to index of event-slot
    callEvent(event-item, player's inventory, {_slot}, "slot change")

on book edit:
    set {_slot} to 40 if event.getSlot() is -1 else event.getSlot()
    callEvent(event-item, player's inventory, {_slot}, "book edit")
