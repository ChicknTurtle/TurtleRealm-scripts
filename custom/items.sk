
options:
    customNamespace: "turtle"
    customItemsFilepath: "plugins/Skript/scripts/custom/yamls"

function getItemFromId(id:string) :: item:
    set {_s::*} to {_id} split at ":"
    if {_s::1} = "minecraft":
        set {_i} to itemtype from key (namespaced key of {_id})
        {_i} is set
        return {_i}
    if {-customItems::%{_s::2}%} is set:
        return {-customItems::%{_s::2}%}
    return barrier

function loadCustomRecipe(id:string, index:string, path:string, yaml:string):
    set {_type} to yaml value "%{_path}%.%{_index}%.type" of {_yaml}
    # shaped
    if {_type} is "shaped":
        # amount
        set {_amount} to yaml value "%{_path}%.%{_index}%.amount" of {_yaml}
        if {_amount} isn't set:
            set {_amount} to 1
        # result
        set {_result} to yaml value "%{_path}%.%{_index}%.result" of {_yaml}
        if {_result} isn't set:
            set {_result} to "%{-customItemNamespace}%:%{_id}%"
        set {_result} to getItemFromId({_result})
        # group, shape, ingredients
        set {_group} to yaml value "%{_path}%.%{_index}%.group" of {_yaml}
        set {_shape::*} to yaml list "%{_path}%.%{_index}%.shape" of {_yaml}
        loop yaml node keys "%{_path}%.%{_index}%.ingredients" of {_yaml}:
            set {_ing::%loop-value%} to getItemFromId(yaml value "%{_path}%.%{_index}%.ingredients.%loop-value%" of {_yaml})
        # register
        register shaped recipe:
            id: "%{-customItemNamespace}%:%{_id}%_%{_index}%"
            result: {_amount} of {_result}
            shape: {_shape::*}
            group: {_group}
            ingredients:
                loop indexes of {_ing::*}:
                    set ingredient of loop-value to {_ing::%loop-value%}
    # shapeless
    else if {_type} is "shapeless":
        # amount
        set {_amount} to yaml value "%{_path}%.%{_index}%.amount" of {_yaml}
        if {_amount} isn't set:
            set {_amount} to 1
        # result
        set {_result} to yaml value "%{_path}%.%{_index}%.result" of {_yaml}
        if {_result} isn't set:
            set {_result} to "%{-customItemNamespace}%:%{_id}%"
        set {_result} to getItemFromId({_result})
        # group, ingredients
        set {_group} to yaml value "%{_path}%.%{_index}%.group" of {_yaml}
        set {_ing::*} to yaml list "%{_path}%.%{_index}%.ingredients" of {_yaml}
        # register
        register shapeless recipe:
            id: "%{-customItemNamespace}%:%{_id}%_%{_index}%"
            result: {_amount} of {_result}
            group: {_group}
            ingredients:
                loop {_ing::*}:
                    add getItemFromId(loop-value) to ingredients
    #broadcast "Loaded recipe %{_index}% of %{_id}% (%{_type}%)"

function loadCustomItem(id:string,yaml:string):
    #! Create Item !#
    set {_i} to getItemFromId(yaml value "custom.items.%{_id}%.base" of {_yaml})
    set string tag "customId" of custom nbt of {_i} to {_id}
    # name
    set {_name} to yaml value "custom.items.%{_id}%.name" of {_yaml}
    if {_name} is set:
        set component item name of {_i} to text component of {_name}
    # lore
    set {_lore::*} to yaml list "custom.items.%{_id}%.lore" of {_yaml}
    loop {_lore::*}:
        add "&7%loop-value%" to lore of {_i}
    # rarity
    set {_rarity} to yaml value "custom.items.%{_id}%.rarity" of {_yaml}
    if {_rarity} is set:
        set string tag "minecraft:rarity" of nbt of {_i} to {_rarity}
    # stack size
    set {_stack_size} to yaml value "custom.items.%{_id}%.stack_size" of {_yaml}
    if {_stack_size} is set:
        set max stack size component of {_i} to {_stack_size}
    # model
    set {_model} to yaml value "custom.items.%{_id}%.model" of {_yaml}
    if {_model} is set:
        set string tag "minecraft:item_model" of nbt of {_i} to {_model}
    # durability
    set {_durability} to yaml value "custom.items.%{_id}%.durability" of {_yaml}
    if {_durability} is set:
        set string tag "minecraft:max_durability" of nbt of {_i} to {_durability}
    # fire resistant
    set {_fire_resistant} to yaml value "custom.items.%{_id}%.fire_resistant" of {_yaml}
    if {_fire_resistant} is set:
        set string tag "minecraft:fire_resistant" of nbt of {_i} to {_fire_resistant}
    # jukebox song
    set {_jukebox_song} to yaml value "custom.items.%{_id}%.jukebox_song" of {_yaml}
    if {_jukebox_song} is set:
        set string tag "minecraft:jukebox_playable;song" of nbt of {_i} to {_jukebox_song}
    # food
    set {_nutrition} to yaml value "custom.items.%{_id}%.food.nutrition" of {_yaml}
    if {_nutrition} is set:
        set string tag "minecraft:food;nutrition" of nbt of {_i} to {_nutrition}
    set {_saturation} to yaml value "custom.items.%{_id}%.food.saturation" of {_yaml}
    if {_saturation} is set:
        set string tag "minecraft:food;saturation" of nbt of {_i} to {_saturation}
    set {_can_always_eat} to yaml value "custom.items.%{_id}%.food.can_always_eat" of {_yaml}
    if {_can_always_eat} is set:
        set string tag "minecraft:food;can_always_eat" of nbt of {_i} to {_can_always_eat}
    set {_using_converts_to} to yaml value "custom.items.%{_id}%.food.using_converts_to" of {_yaml}
    if {_using_converts_to} is set:
        set string tag "minecraft:food;using_converts_to" of nbt of {_i} to {_using_converts_to}
    # attributes
    loop yaml node keys "custom.items.%{_id}%.attributes" of {_yaml}:
        set {_attr} to "%{-customItemNamespace}%:%loop-value%"
        replace " " with "_" in {_attr}
        set {_slot} to yaml value "custom.items.%{_id}%.attributes.%loop-value%.slot" of {_yaml}
        set {_operation} to yaml value "custom.items.%{_id}%.attributes.%loop-value%.operation" of {_yaml}
        apply attribute modifier to {_i}:
            attribute: loop-value parsed as attribute type
            id: {_attr}
            amount: yaml value "custom.items.%{_id}%.attributes.%loop-value%.amount" of {_yaml}
            slot: {_slot} parsed as equipment slot group
            operation: {_operation} parsed as attribute operation
    # custom nbt
    set string tag "customId" of custom nbt of {_i} to {_id}
    set {_nbt} to nbt from (yaml value "custom.items.%{_id}%.nbt" of {_yaml})
    if {_nbt} is set:
        add {_nbt} to nbt of {_i}

    #! Save Item !#
    set {-customItems::%{_id}%} to {_i}
    #broadcast "Loaded item %{_id}%"

function loadCustomYaml(yaml:object):
    # load items
    loop yaml node keys "custom.items" of {_yaml}:
        loadCustomItem(loop-value,{_yaml})
    # load blocks
    loop yaml node keys "custom.blocks" of {_yaml}:
        loadCustomBlock(loop-value,{_yaml})
    # load recipes after all items are registered
        loop yaml node keys "custom.blocks.%loop-value%.recipes" of {_yaml}:
            loadCustomRecipe(loop-value-1, loop-value-2, "custom.blocks.%loop-value-1%.recipes", {_yaml})
    loop yaml node keys "custom.items" of {_yaml}:
        loop yaml node keys "custom.items.%loop-value%.recipes" of {_yaml}:
            loadCustomRecipe(loop-value-1, loop-value-2, "custom.items.%loop-value-1%.recipes", {_yaml})

on load:
    set {-customItemNamespace} to {@customNamespace}
    # load items
    load all yaml from directory {@customItemsFilepath} using filename as id
    loop all currently loaded yaml files:
        loadCustomYaml(loop-value)
    
on unload:
    delete {-customItems::*}

# give command
command /givecustom <text> [<integer=1>]:
    permission: op
    permission message: <light red>You don't have permission!<r>
    trigger:
        if {-customItems::%arg-1%} is set:
            loop arg-2 times:
                give or drop {-customItems::%arg-1%} to player
        else:
            send "Â§cUnknown custom item: '%arg-1%'"
on tab complete of "/givecustom" or "/skript:givecustom":
    set tab completions for position 1 to indexes of {-customItems::*}

# handle custom items in recipes
function prepareCustomCraft(recipe:string, inv:inventory) :: boolean:
    ingredients of recipe {_recipe} is set
    loop 9 times:
        if slot loop-iteration of {_inv} isn't air:
            exit loop
        add 1 to {_offset}
    loop ingredients of recipe {_recipe}:
        if loop-iteration > 9 - {_offset}:
            exit loop
        set {_item1} to loop-value
        set {_item2} to slot loop-iteration+{_offset} of {_inv}
        string tag "customId" of custom nbt of {_item1} !== string tag "customId" of custom nbt of {_item2}
        return false
    return true
on preparing craft:
    if prepareCustomCraft(event-string, event-inventory) is false:
        set event-slot to air
on crafter craft:
    if prepareCustomCraft(event-string, inventory of event-block) is false:
        set recipe result to air
