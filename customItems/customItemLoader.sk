
# Made for 1.21.4

using item_component

import:
    java.lang.Integer as javaInteger
    java.lang.Float as javaFloat

# format namespaced type
local function formatNamespacedType(value:string, type:type, item:item) :: object:
    set {_valuekey} to namespaced key from {_value}
    parse effect "set {-valuetype} to %{_type}% from key ""%{_valuekey}%"""
    set {_valuetype} to {-valuetype}
    delete {-valuetype}
    if {_valuetype} is set:
        return str({_valuekey})
    else:
        set {_valuekey} to {_value} if {_valuekey} isn't set
        set {_fullid} to string tag "customId" of custom nbt of {_item}
        log error "Invalid %{_type}% for %{_fullid}%: %{_valuekey}%"

# format namespaced type 2
# returns type instead of key
local function formatNamespacedType2(value:string, type:type, item:item) :: object:
    set {_valuekey} to namespaced key from {_value}
    parse effect "set {-valuetype} to %{_type}% from key ""%{_valuekey}%"""
    set {_valuetype} to {-valuetype}
    delete {-valuetype}
    if {_valuetype} is set:
        return {_valuetype}
    else:
        set {_valuekey} to {_value} if {_valuekey} isn't set
        set {_fullid} to string tag "customId" of custom nbt of {_item}
        log error "Invalid %{_type}% for %{_fullid}%: %{_valuekey}%"

# format item
local function formatItemId(value:string, item:item) :: object: 
    set {_itemId} to getItem({_value})
    if {_itemId} is set:
        return {_itemId}
    else:
        set {_valuekey} to {_value} if {_valuekey} isn't set
        set {_fullid} to string tag "customId" of custom nbt of {_item}
        log error "Invalid item id for %{_fullid}%: %{_value}%"

# format block tag/id
local function formatBlockTagOrId(value:string, item:item) :: object:
    set {_valuekey} to namespaced key from {_value}
    set {_blockid} to material from key {_valuekey}
    set {_blockid} to {_} if item within {_blockid} isn't a block
    set {_blocktag} to block tag {_value}
    if {_blocktag} is set:
        return {_blocktag}
    else if {_blockid} is set:
        return {_blockid}
    else:
        set {_valuekey} to {_value} if {_valuekey} isn't set
        set {_fullid} to string tag "customId" of custom nbt of {_item}
        log error "Invalid block tag/id for %{_fullid}%: %{_valuekey}%"

# format entity tag/id
local function formatEntityTagOrId(value:string, item:item) :: object:
    set {_valuekey} to namespaced key from {_value}
    set {_entityid} to entity type from key {_valuekey}
    set {_entitytag} to minecraft entity tag {_valuekey}
    if {_entitytag} is set:
        return "#%{_valuekey}%"
    else if {_entityid} is set:
        return "%{_valuekey}%"
    else:
        set {_valuekey} to {_value} if {_valuekey} isn't set
        set {_fullid} to string tag "customId" of custom nbt of {_item}
        log error "Invalid entity tag/id for %{_fullid}%: %{_valuekey}%"

# get nbt
local function getNbt(path:string, yaml:string, index:string, item:item) :: object:
    set {_value} to yaml value "%{_path}%.%{_index}%" of {_yaml}
    set {_value} to "{}" if {_value} isn't set
    set {_value_nbt} to nbt compound from {_value}
    if {_value} is set:
        if {_value_nbt} is set:
            return {_value_nbt}
        else:
            set {_fullid} to string tag "customId" of custom nbt of {_item}
            log error "Invalid %{_index}% for %{_fullid}%: %{_value}%"

# get attribute operation
local function getAttrOperation(path:string, yaml:string, index:string, item:item) :: object:
    set {_value} to yaml value "%{_path}%.%{_index}%" of {_yaml}
    set {_value} to "add_value" if {_value} isn't set
    if {_value} is "add_value":
        set {_value} to "add_number"
    else if {_value} is "add_multiplied_base":
        set {_value} to "add_scalar"
    else if {_value} is "add_multiplied_total":
        set {_value} to "multiply_scalar_1"
    set {_value_oper} to {_value} parsed as attribute operation
    if {_value} is set:
        if {_value_oper} is set:
            return {_value_oper}
        else:
            set {_fullid} to string tag "customId" of custom nbt of {_item}
            log error "Invalid %{_index}% for %{_fullid}%: %{_value}%"

# get equipment slot group
local function getEquipSlotGroup(path:string, yaml:string, index:string, item:item) :: object:
    set {_value} to yaml value "%{_path}%.%{_index}%" of {_yaml}
    set {_value} to "any" if {_value} isn't set
    set {_value_group} to "%{_value}%_slot_group" parsed as equipment slot group
    if {_value} is set:
        if {_value_group} is set:
            return {_value_group}
        else:
            set {_fullid} to string tag "customId" of custom nbt of {_item}
            log error "Invalid %{_index}% for %{_fullid}%: %{_value}%"

# get namespaced
local function getNamespaced(path:string, yaml:string, index:string, item:item) :: object:
    set {_value} to yaml value "%{_path}%.%{_index}%" of {_yaml}
    set {_value_key} to namespacedkey from {_value}
    if {_value} is set:
        if {_value_key} is set:
            return str({_value_key})
        else:
            set {_fullid} to string tag "customId" of custom nbt of {_item}
            log error "Invalid %{_index}% for %{_fullid}%: %{_value}%"

# get integer
local function getInteger(path:string, yaml:string, index:string, item:item, min:number={_}, max:number={_}) :: object:
    set {_value} to yaml value "%{_path}%.%{_index}%" of {_yaml}
    set {_value_int} to str({_value}) parsed as integer
    set {_min} to {_value_int} if {_min} isn't set
    set {_max} to {_value_int} if {_max} isn't set
    set {_min} to max({_min}, javaInteger.MIN_VALUE)
    set {_max} to min({_max}, javaInteger.MAX_VALUE)
    if {_value} is set:
        if all:
            {_value_int} is set
            {_value_int} >= {_min}
            {_value_int} <= {_max}
        then:
            return {_value_int}
        else:
            set {_fullid} to string tag "customId" of custom nbt of {_item}
            log error "Invalid %{_index}% for %{_fullid}%: %{_value}%"

# get number
local function getNumber(path:string, yaml:string, index:string, item:item, min:number={_}, max:number={_}) :: object:
    set {_value} to yaml value "%{_path}%.%{_index}%" of {_yaml}
    set {_value_num} to str({_value}) parsed as number
    set {_min} to {_value_num} if {_min} isn't set
    set {_max} to {_value_num} if {_max} isn't set
    set {_min} to max({_min}, javaInteger.MIN_VALUE)
    set {_max} to min({_max}, javaInteger.MAX_VALUE)
    if {_value} is set:
        if all:
            {_value_num} is set
            {_value_num} >= {_min}
            {_value_num} <= {_max}
        then:
            return {_value_num}
        else:
            set {_fullid} to string tag "customId" of custom nbt of {_item}
            log error "Invalid %{_index}% for %{_fullid}%: %{_value}%"

# get boolean
local function getBoolean(path:string, yaml:string, index:string, item:item) :: object:
    set {_value} to yaml value "%{_path}%.%{_index}%" of {_yaml}
    set {_value_bool} to str({_value}) parsed as boolean
    if {_value} is set:
        if {_value_bool} is set:
            return {_value_bool}
        else:
            set {_fullid} to string tag "customId" of custom nbt of {_item}
            log error "Invalid %{_index}% for %{_fullid}%: %{_value}%"

# get choice
local function getChoice(path:string, yaml:string, index:string, item:item, values:objects) :: object:
    set {_value} to yaml value "%{_path}%.%{_index}%" of {_yaml}
    set {_value_str} to str({_value})
    if {_value} is set:
        if all:
            {_value_str} is set
            {_values::*} contains {_value_str}
        then:
            return {_value_str}
        else:
            set {_fullid} to string tag "customId" of custom nbt of {_item}
            log error "Invalid %{_index}% for %{_fullid}%: %{_value}%"

local function loadItem(namespace:string, id:string, yaml:string):
    set {_path} to "%{_namespace}%.items.%{_id}%"
    set {_fullid} to "%{_namespace}%:%{_id}%"
    
    # base
    set {_base} to yaml value "%{_path}%.base" of {_yaml}
    set {_basekey} to namespaced key from {_base}
    set {_item} to material from key {_basekey}
    set {_item} to (material from key (namespaced key from {_fullid})) ? {_item}
    set string tag "customId" of custom nbt of {_item} to {_fullid}
    if {_item} isn't set:
        set {_basekey} to {_base} if {_basekey} isn't set
        log error "Invalid base for %{_fullid}%: %{_basekey}%"
        stop
    
    # model
    set {_model} to getNamespaced({_path}, {_yaml}, "model", {_item})
    if {_model} is set:
        set string tag "minecraft:item_model" of nbt of {_item} to {_model}
    
    # custom model data
    
    # name
    set {_name} to yaml value "%{_path}%.name" of {_yaml}
    if {_name} is set:
        set component item name of {_item} to text component from {_name}
    
    # rarity
    set {_rarities::*} to "common", "uncommon", "rare", and "epic"
    set {_rarity} to getChoice({_path}, {_yaml}, "rarity", {_item}, {_rarities::*})
    if {_rarity} is set:
        set string tag "minecraft:rarity" of vanilla nbt of {_item} to {_rarity}
    
    # lore
    set {_lore::*} to yaml list "%{_path}%.lore" of {_yaml}
    if {_lore::*} is set:
        loop {_lore::*}:
            add "&7%loop-value%" to lore of {_item}
    
    # tooltip style
    set {_tooltip_style} to getNamespaced({_path}, {_yaml}, "tooltip_style", {_item})
    if {_tooltip_style} is set:
        set string tag "minecraft:tooltip_style" of vanilla nbt of {_item} to {_tooltip_style}
    
    # hide additional tooltip
    set {_hide_additional_tooltip} to getBoolean({_path}, {_yaml}, "hide_additional_tooltip", {_item})
    if {_hide_additional_tooltip} is set:
        set boolean tag "minecraft:hide_additional_tooltip" of vanilla nbt of {_item} to {_hide_additional_tooltip}
    
    # hide tooltip
    set {_hide_tooltip} to getBoolean({_path}, {_yaml}, "hide_tooltip", {_item})
    if {_hide_tooltip} is set:
        if {_hide_tooltip} is true:
            compound tag "minecraft:hide_tooltip" of vanilla nbt of {_item} isn't set
            set compound tag "minecraft:hide_tooltip" of nbt of {_item} to empty nbt compound
        else:
            compound tag "minecraft:hide_tooltip" of vanilla nbt of {_item} is set
            delete compound tag "minecraft:hide_tooltip" of nbt of {_item}
            set compound tag "!minecraft:hide_tooltip" of nbt of {_item} to empty nbt compound
    
    # max stack size
    set {_max_stack_size} to getInteger({_path}, {_yaml}, "max_stack_size", {_item}, 1, 99)
    if {_max_stack_size} is set:
        set int tag "minecraft:max_stack_size" of vanilla nbt of {_item} to {_max_stack_size}
    
    # damage resistant
    set {_damage_resistant} to getNamespaced({_path}, {_yaml}, "damage_resistant", {_item})
    if {_damage_resistant} is set:
        set {_damage_resistant_str} to "#%{_damage_resistant}%"
        set {_item} to setNbt({_item}, string tag, "minecraft:damage_resistant;types", {_damage_resistant_str})
    
    # durability, unbreakable
    if getInteger({_path}, {_yaml}, "max_damage", {_item}) is -1:
        set {_unbreakable_tooltip} to getBoolean({_path}, {_yaml}, "unbreakable_show_in_tooltip", {_item})
        if {_unbreakable_tooltip} is false:
            set compound tag "minecraft:unbreakable" of nbt of {_item} to nbt from "{show_in_tooltip:false}"
        else:
            set compound tag "minecraft:unbreakable" of nbt of {_item} to empty nbt compound
    else:
        set {_durability} to getInteger({_path}, {_yaml}, "max_damage", {_item}, 1)
        if {_durability} is set:
            set max durability of {_item} to {_durability}
    
    # enchantments
    loop yaml node keys "%{_path}%.enchantments" of {_yaml}:
        set {_enchantment} to formatNamespacedType(loop-value, enchantment, {_item})
        set {_level} to getInteger({_path}, {_yaml}, "enchantments.%loop-value%", {_item}, 1, 255)
        if {_enchantment} is set:
            {_level} is set
            set {_enchanttype} to "%{_enchantment}% %{_level}%" parsed as enchantment type
            {_enchanttype} is set
            enchant {_item} with {_enchanttype}
    
    # enchantment glint override
    set {_enchantment_glint_override} to getBoolean({_path}, {_yaml}, "enchantment_glint_override", {_item})
    if {_enchantment_glint_override} is set:
        set boolean tag "minecraft:enchantment_glint_override" of vanilla nbt of {_item} to {_enchantment_glint_override}
    
    # enchantable
    set {_enchantable} to getInteger({_path}, {_yaml}, "enchantable", {_item}, 1)
    if {_enchantable} is set:
        int tag "minecraft:enchantable;value" of vanilla nbt of {_item} isn't {_enchantable}
        set {_item} to setNbt({_item}, int tag, "minecraft:enchantable;value", {_enchantable})
    
    # attributes
    loop yaml node keys "%{_path}%.attributes" of {_yaml}:
        # attr
        set {_attr} to formatNamespacedType2(loop-value, attribute type, {_item})
        if {_attr} isn't set:
            continue this loop
        
        # attrid
        set {_attr_id} to getNamespaced({_path}, {_yaml}, "attributes.%loop-value%.id", {_item})
        if {_attr_id} isn't set:
            set {_attr_id} to "%{_namespace}%:%loop-value%"
        replace " " with "_" in {_attr_id}
        
        # amount
        set {_attr_amount} to getNumber({_path}, {_yaml}, "attributes.%loop-value%.amount", {_item})
        set {_attr_amount} to {_attr_amount} ? 1
        
        # equipslot
        set {_attr_equipslot} to getEquipSlotGroup({_path}, {_yaml}, "attributes.%loop-value%.slot", {_item})
        if {_attr_equipslot} isn't set:
            continue this loop
        
        # operation
        set {_attr_operation} to getAttrOperation({_path}, {_yaml}, "attributes.%loop-value%.operation", {_item})
        if {_attr_operation} isn't set:
            continue this loop
        
        # apply attribute
        apply attribute modifier to {_item}:
            attribute: {_attr}
            id: {_attr_id}
            amount: {_attr_amount}
            slot: {_attr_equipslot}
            operation: {_attr_operation}
            
    # show attributes in tooltip
    set {_show_attributes_in_tooltip} to getBoolean({_path}, {_yaml}, "show_attributes_in_tooltip", {_item})
    if {_show_attributes_in_tooltip} is set:
        set boolean tag "minecraft:attribute_modifiers;show_in_tooltip" of vanilla nbt of {_item} to {_show_attributes_in_tooltip}
    
    # tool
    if yaml value "%{_path}%.tool" of {_yaml} is set:
        set {_tool_nbt} to nbt from "{rules:[]}"

        # default mining speed
        set {_default_mining_speed} to getNumber({_path}, {_yaml}, "tool.default_mining_speed", {_item})
        
        # damage per block
        set {_damage_per_block} to getInteger({_path}, {_yaml}, "tool.damage_per_block", {_item}, 1)
        
        # rules
        loop yaml node keys "%{_path}%.tool.rules" of {_yaml}:
            set {_rule_nbt} to empty nbt compound

            # blocks
            set {_blocks} to formatBlockTagOrId(loop-value, {_item})
            if {_blocks} is set:
                set {_rule_nbt::%{_blocks}%::blocks} to {_blocks}
            else:
                continue this loop
            
            # speed
            set {_speed} to getNumber({_path}, {_yaml}, "tool.rules.%loop-value%.speed", {_item})
            if {_speed} is set:
                set {_rule_nbt::%{_blocks}%::speed} to {_speed}
            
            # correct for drops
            set {_correct_for_drops} to getBoolean({_path}, {_yaml}, "tool.rules.%loop-value%.correct_for_drops", {_item})
            if {_correct_for_drops} is set:
                set {_rule_nbt::%{_blocks}%::correct_for_drops} to {_correct_for_drops}
                            
        # set tool
        apply tool component to {_item}:
            default_mining_speed: {_default_mining_speed}
            damage_per_block: {_damage_per_block}
            rules:
                loop indexes of {_rule_nbt::*}:
                    apply tool rule:
                        blocks: {_rule_nbt::%loop-value%::blocks}
                        speed: {_rule_nbt::%loop-value%::speed}
                        correct_for_drops: {_rule_nbt::%loop-value%::correct_for_drops}

    # food
    if yaml value "%{_path}%.food" of {_yaml} is set:

        # nutrition
        set {_nutrition} to getInteger({_path}, {_yaml}, "food.nutrition", {_item}, 1)
        if {_nutrition} isn't set:
            exit 1 section
        
        # saturation
        set {_saturation} to getNumber({_path}, {_yaml}, "food.saturation", {_item})
        if {_saturation} isn't set:
            exit 1 section

        # can always eat
        set {_can_always_eat} to getBoolean({_path}, {_yaml}, "food.can_always_eat", {_item})
        set {_can_always_eat} to false if {_can_always_eat} isn't set
        
        # set food
        apply food component to {_item}:
            nutrition: {_nutrition}
            saturation: {_saturation}
            can_always_eat: {_can_always_eat}
        
        # ensure item is edible
        if yaml value "%{_path}%.consumable" of {_yaml} isn't set:
            compound tag "minecraft:consumable" of vanilla nbt of {_item} isn't set
            set compound tag "minecraft:consumable" of vanilla nbt of {_item} to empty nbt compound

    # consumable
    if yaml value "%{_path}%.consumable" of {_yaml} is set:
        set {_consumable_nbt} to empty nbt compound

        # consume seconds
        set {_consume_seconds} to getNumber({_path}, {_yaml}, "consumable.consume_seconds", {_item}, 0)
        if {_consume_seconds} is set:
            set float tag "consume_seconds" of {_consumable_nbt} to {_consume_seconds}
        
        # animation
        set {_animations::*} to "none", "eat", "drink", "block", "bow", "spear", "crossbow", "spyglass", "toot_horn", and "brush"
        set {_animation} to getChoice({_path}, {_yaml}, "consumable.animation", {_item}, {_animations::*})
        if {_animation} is set:
            set string tag "animation" of {_consumable_nbt} to {_animation}
        
        # sound event
        set {_sound_event} to getNamespaced({_path}, {_yaml}, "consumable.sound_event", {_item})
        if {_sound_event} is set:
            set string tag "sound" of {_consumable_nbt} to {_sound_event}
        
        # play sound
        set {_play_sound} to getNamespaced({_path}, {_yaml}, "consumable.play_sound", {_item})
        if {_play_sound} is set:
            add nbt from "{type:""minecraft:play_sound"",sound:""%{_play_sound}%""}" to {_on_consume_effects::*}
                
        # has consume particles
        set {_has_consume_particles} to getBoolean({_path}, {_yaml}, "consumable.has_consume_particles", {_item})
        if {_has_consume_particles} is set:
            set boolean tag "has_consume_particles" of {_consumable_nbt} to {_has_consume_particles}
        
        # clear all effects
        set {_clear_all_effects} to getBoolean({_path}, {_yaml}, "consumable.clear_all_effects", {_item})
        if {_clear_all_effects} is true:
            add (nbt from "{type:""minecraft:clear_all_effects""}") to {_on_consume_effects::*}
        
        # remove effects
        loop yaml list "%{_path}%.consumable.remove_effects" of {_yaml}:
            set {_effect} to formatNamespacedType(loop-value, potion effect type, {_item})
            {_effect} is set
            add {_effect} to {_remove_effects::*}
        if {_remove_effects::*} is set:
            set {_remove_effects_nbt} to nbt from "{type:""minecraft:remove_effects""}"
            set string list tag "effects" of {_remove_effects_nbt} to {_remove_effects::*}
            add {_remove_effects_nbt} to {_on_consume_effects::*}
        
        # apply effects
        loop yaml node keys "%{_path}%.consumable.apply_effects" of {_yaml}:
            set {_effect_nbt} to empty nbt compound
            
            # id
            set {_id} to formatNamespacedType(loop-value, potion effect type, {_item})
            if {_id} is set:
                set string tag "id" of {_effect_nbt} to {_id}
            else:
                continue this loop
            
            # amplifier
            set {_amplifier} to getInteger({_path}, {_yaml}, "consumable.apply_effects.%loop-value%.amplifier", {_item}, 1, 256)
            set {_amplifier} to 0 if {_amplifier} isn't set
            if {_amplifier} is set:
                set {_amplifier} to {_amplifier} - 1
                set int tag "amplifier" of {_effect_nbt} to {_amplifier}
            
            # duration
            set {_duration} to getNumber({_path}, {_yaml}, "consumable.apply_effects.%loop-value%.duration", {_item}, -1)
            set {_duration} to 15 if {_duration} isn't set
            if {_duration} is set:
                set {_duration} to ceil({_duration}*20)
                set int tag "duration" of {_effect_nbt} to {_duration}
            
            # show particles
            set {_show_particles} to getBoolean({_path}, {_yaml}, "consumable.apply_effects.%loop-value%.show_particles", {_item})
            if {_show_particles} is set:
                set boolean tag "show_particles" of {_effect_nbt} to {_show_particles}
            
            # show icon
            set {_show_icon} to getBoolean({_path}, {_yaml}, "consumable.apply_effects.%loop-value%.show_icon", {_item})
            if {_show_icon} is set:
                set boolean tag "show_icon" of {_effect_nbt} to {_show_icon}
            
            # ambient
            set {_ambient} to getBoolean({_path}, {_yaml}, "consumable.apply_effects.%loop-value%.ambient", {_item})
            if {_ambient} is set:
                set boolean tag "ambient" of {_effect_nbt} to {_ambient}
            
            add {_effect_nbt} to {_apply_effects::*}
        
        if size of {_apply_effects::*} > 0:
            set {_apply_effects_nbt} to nbt from "{type:""minecraft:apply_effects""}"
            set compound list tag "effects" of {_apply_effects_nbt} to {_apply_effects::*}
            # probability
            set {_probability} to getNumber({_path}, {_yaml}, "consumable.probability", {_item}, 0, 100)
            if {_probability} is set:
                set {_probability} to {_probability} / 100
                set float tag "probability" of {_apply_effects_nbt} to {_probability}
            add {_apply_effects_nbt} to {_on_consume_effects::*}
        
        # teleport randomly
        set {_teleport_randomly} to getNumber({_path}, {_yaml}, "consumable.teleport_randomly", {_item}, javaFloat.MIN_VALUE)
        if {_teleport_randomly} is set:
            {_teleport_randomly} isn't 0
            set {_teleport_randomly_nbt} to nbt from "{type:""minecraft:teleport_randomly""}"
            set float tag "diameter" of {_teleport_randomly_nbt} to {_teleport_randomly}
            add {_teleport_randomly_nbt} to {_on_consume_effects::*}
        
        # set consumable
        if {_on_consume_effects::*} is set:
            set compound list tag "on_consume_effects" of {_consumable_nbt} to {_on_consume_effects::*}
        set compound tag "minecraft:consumable" of vanilla nbt of {_item} to {_consumable_nbt}
    
    # use cooldown
    if yaml value "%{_path}%.use_cooldown" of {_yaml} is set:
        set {_cooldown_nbt} to empty nbt compound

        # seconds
        set {_seconds} to getNumber({_path}, {_yaml}, "use_cooldown.seconds", {_item}, javaFloat.MIN_VALUE)
        set {_seconds} to 5 if {_seconds} isn't set
        if {_seconds} is set:
            set float tag "seconds" of {_cooldown_nbt} to {_seconds}
        
        # cooldown group
        set {_cooldown_group} to getNamespaced({_path}, {_yaml}, "use_cooldown.cooldown_group", {_item})
        set {_cooldown_group} to {_fullid} if {_cooldown_group} isn't set
        if {_cooldown_group} is set:
            set string tag "cooldown_group" of {_cooldown_nbt} to {_cooldown_group}
        
        # set use cooldown
        set {_item} to setNbt({_item}, compound tag, "minecraft:use_cooldown", {_cooldown_nbt})

    # use remainder
    set {_use_remainder} to getNamespaced({_path}, {_yaml}, "use_remainder", {_item})
    if {_use_remainder} is set:
        set {_use_remainder} to formatItemId({_use_remainder}, {_item})
        {_use_remainder} is set
        set {_use_remainder} to (full nbt of {_use_remainder})
    
    # use remainder nbt
    if {_use_remainder} is set:
        set {_use_remainder_nbt} to getNbt({_path}, {_yaml}, "use_remainder_nbt", {_item})
        set {_use_remainder_nbt2} to empty nbt compound
        set compound tag "components" of {_use_remainder_nbt2} to {_use_remainder_nbt}
        add {_use_remainder_nbt2} to {_use_remainder}
        
    # set use remainder
    if {_use_remainder} is set:
        set {_item} to setNbt({_item}, compound tag, "minecraft:use_remainder", {_use_remainder})
    
    # equippable
    if yaml value "%{_path}%.equippable" of {_yaml} is set:
        set {_equippable_nbt} to empty nbt compound

        # slot
        set {_slots::*} to "feet", "legs", "chest", "head", "body", "mainhand", "offhand"
        set {_slot} to getChoice({_path}, {_yaml}, "equippable.slot", {_item}, {_slots::*})
        if {_slot} is set:
            set string tag "slot" of {_equippable_nbt} to {_slot}
        
        # equip sound
        set {_equip_sound} to getNamespaced({_path}, {_yaml}, "equippable.equip_sound", {_item})
        set {_equip_sound} to "item.armor.equip_generic" if {_equip_sound} isn't set
        if {_equip_sound} is set:
            set string tag "equip_sound" of {_equippable_nbt} to {_equip_sound}
        
        # asset id
        set {_asset_id} to getNamespaced({_path}, {_yaml}, "equippable.asset_id", {_item})
        if {_asset_id} is set:
            set string tag "asset_id" of {_equippable_nbt} to {_asset_id}
        
        # allowed entities
        set {_allowed_entities} to yaml value "%{_path}%.equippable.allowed_entities" of {_yaml}
        if {_allowed_entities} is set:
            set {_allowed_entities} to formatEntityTagOrId({_allowed_entities}, {_item})
            {_allowed_entities} is set
            set string tag "allowed_entities" of {_equippable_nbt} to {_allowed_entities}
        
        # dispensable
        set {_dispensable} to getBoolean({_path}, {_yaml}, "equippable.dispensable", {_item})
        if {_dispensable} is set:
            set boolean tag "dispensable" of {_equippable_nbt} to {_dispensable}
        
        # swappable
        set {_swappable} to getBoolean({_path}, {_yaml}, "equippable.swappable", {_item})
        if {_swappable} is set:
            set boolean tag "swappable" of {_equippable_nbt} to {_swappable}
        
        # damage on hurt
        set {_damage_on_hurt} to getBoolean({_path}, {_yaml}, "equippable.damage_on_hurt", {_item})
        if {_damage_on_hurt} is set:
            set boolean tag "damage_on_hurt" of {_equippable_nbt} to {_damage_on_hurt}
        
        # camera overlay
        set {_camera_overlay} to getNamespaced({_path}, {_yaml}, "equippable.camera_overlay", {_item})
        if {_camera_overlay} is set:
            set string tag "camera_overlay" of {_equippable_nbt} to {_camera_overlay}
        
        # set equippable
        set {_item} to setNbt({_item}, compound tag, "minecraft:equippable", {_equippable_nbt})

        # glider
        set {_glider} to getBoolean({_path}, {_yaml}, "equippable.glider", {_item})
        if {_glider} is set:
            if {_glider} is true:
                compound tag "minecraft:glider" of vanilla nbt of {_item} isn't set
                set compound tag "minecraft:glider" of nbt of {_item} to empty nbt compound
            else:
                compound tag "minecraft:glider" of vanilla nbt of {_item} is set
                delete compound tag "minecraft:glider" of nbt of {_item}
                set compound tag "!minecraft:glider" of nbt of {_item} to empty nbt compound
        
    # potion contents
    if yaml value "%{_path}%.potion_contents" of {_yaml} is set:
        set {_potion_contents_nbt} to empty nbt compound

        # potion
        set {_potion} to getNamespaced({_path}, {_yaml}, "potion_contents.potion", {_item})
        if {_potion} is set:
            set string tag "potion" of {_potion_contents_nbt} to {_potion}
        
        # custom color
        set {_custom_color} to yaml value "%{_path}%.potion_contents.custom_color" of {_yaml}
        set {_custom_color} to hexToDecimal({_custom_color})
        if {_custom_color} is set:
            set int tag "custom_color" of {_potion_contents_nbt} to {_custom_color}
        
        # custom name
        set {_custom_name} to yaml value "%{_path}%.potion_contents.custom_name" of {_yaml}
        if {_custom_name} is set:
            set string tag "custom_name" of {_potion_contents_nbt} to {_custom_name}
        
        # custom effects
        loop yaml node keys "%{_path}%.potion_contents.custom_effects" of {_yaml}:
            set {_effect_nbt} to empty nbt compound
            
            # id
            set {_id} to formatNamespacedType(loop-value, potion effect type, {_item})
            if {_id} is set:
                set string tag "id" of {_effect_nbt} to {_id}
            else:
                continue this loop
            
            # amplifier
            set {_amplifier} to getInteger({_path}, {_yaml}, "potion_contents.custom_effects.%loop-value%.amplifier", {_item}, 1, 256)
            set {_amplifier} to 0 if {_amplifier} isn't set
            if {_amplifier} is set:
                set {_amplifier} to {_amplifier} - 1
                set int tag "amplifier" of {_effect_nbt} to {_amplifier}
            
            # duration
            set {_duration} to getNumber({_path}, {_yaml}, "potion_contents.custom_effects.%loop-value%.duration", {_item}, -1)
            set {_duration} to 15 if {_duration} isn't set
            if {_duration} is set:
                set {_duration} to ceil({_duration}*20)
                set int tag "duration" of {_effect_nbt} to {_duration}
            
            # show particles
            set {_show_particles} to getBoolean({_path}, {_yaml}, "potion_contents.custom_effects.%loop-value%.show_particles", {_item})
            if {_show_particles} is set:
                set boolean tag "show_particles" of {_effect_nbt} to {_show_particles}
            
            # show icon
            set {_show_icon} to getBoolean({_path}, {_yaml}, "potion_contents.custom_effects.%loop-value%.show_icon", {_item})
            if {_show_icon} is set:
                set boolean tag "show_icon" of {_effect_nbt} to {_show_icon}
            
            # ambient
            set {_ambient} to getBoolean({_path}, {_yaml}, "potion_contents.custom_effects.%loop-value%.ambient", {_item})
            if {_ambient} is set:
                set boolean tag "ambient" of {_effect_nbt} to {_ambient}
            
            add {_effect_nbt} to {_custom_effects::*}
        
        if size of {_custom_effects::*} > 0:
            set compound list tag "custom_effects" of {_potion_contents_nbt} to {_custom_effects::*}
        
        # set potion contents
        set {_item} to setNbt({_item}, compound tag, "minecraft:potion_contents", {_potion_contents_nbt})
    
    # death protection
    if yaml value "%{_path}%.death_protection" of {_yaml} is set:
        set {_death_protection_nbt} to empty nbt compound
        
        # play sound
        set {_play_sound} to getNamespaced({_path}, {_yaml}, "death_protection.play_sound", {_item})
        if {_play_sound} is set:
            add nbt from "{type:""minecraft:play_sound"",sound:""%{_play_sound}%""}" to {_death_effects::*}
                
        # clear all effects
        set {_clear_all_effects} to getBoolean({_path}, {_yaml}, "death_protection.clear_all_effects", {_item})
        if {_clear_all_effects} is true:
            add (nbt from "{type:""minecraft:clear_all_effects""}") to {_death_effects::*}
        
        # remove effects
        loop yaml list "%{_path}%.death_protection.remove_effects" of {_yaml}:
            set {_effect} to formatNamespacedType(loop-value, potion effect type, {_item})
            {_effect} is set
            add {_effect} to {_remove_effects::*}
        if {_remove_effects::*} is set:
            set {_remove_effects_nbt} to nbt from "{type:""minecraft:remove_effects""}"
            set string list tag "effects" of {_remove_effects_nbt} to {_remove_effects::*}
            add {_remove_effects_nbt} to {_death_effects::*}
        
        # apply effects
        loop yaml node keys "%{_path}%.death_protection.apply_effects" of {_yaml}:
            set {_effect_nbt} to empty nbt compound
            
            # id
            set {_id} to formatNamespacedType(loop-value, potion effect type, {_item})
            if {_id} is set:
                set string tag "id" of {_effect_nbt} to {_id}
            else:
                continue this loop
            
            # amplifier
            set {_amplifier} to getInteger({_path}, {_yaml}, "death_protection.apply_effects.%loop-value%.amplifier", {_item}, 1, 256)
            set {_amplifier} to 0 if {_amplifier} isn't set
            if {_amplifier} is set:
                set {_amplifier} to {_amplifier} - 1
                set int tag "amplifier" of {_effect_nbt} to {_amplifier}
            
            # duration
            set {_duration} to getNumber({_path}, {_yaml}, "death_protection.apply_effects.%loop-value%.duration", {_item}, -1)
            set {_duration} to 15 if {_duration} isn't set
            if {_duration} is set:
                set {_duration} to ceil({_duration}*20)
                set int tag "duration" of {_effect_nbt} to {_duration}
            
            # show particles
            set {_show_particles} to getBoolean({_path}, {_yaml}, "death_protection.apply_effects.%loop-value%.show_particles", {_item})
            if {_show_particles} is set:
                set boolean tag "show_particles" of {_effect_nbt} to {_show_particles}
            
            # show icon
            set {_show_icon} to getBoolean({_path}, {_yaml}, "death_protection.apply_effects.%loop-value%.show_icon", {_item})
            if {_show_icon} is set:
                set boolean tag "show_icon" of {_effect_nbt} to {_show_icon}
            
            # ambient
            set {_ambient} to getBoolean({_path}, {_yaml}, "death_protection.apply_effects.%loop-value%.ambient", {_item})
            if {_ambient} is set:
                set boolean tag "ambient" of {_effect_nbt} to {_ambient}
            
            add {_effect_nbt} to {_apply_effects::*}
        
        if size of {_apply_effects::*} > 0:
            set {_apply_effects_nbt} to nbt from "{type:""minecraft:apply_effects""}"
            set compound list tag "effects" of {_apply_effects_nbt} to {_apply_effects::*}
            # probability
            set {_probability} to getNumber({_path}, {_yaml}, "death_protection.probability", {_item}, 0, 100)
            if {_probability} is set:
                set {_probability} to {_probability} / 100
                set float tag "probability" of {_apply_effects_nbt} to {_probability}
            add {_apply_effects_nbt} to {_death_effects::*}
        
        # teleport randomly
        set {_teleport_randomly} to getNumber({_path}, {_yaml}, "death_protection.teleport_randomly", {_item}, javaFloat.MIN_VALUE)
        if {_teleport_randomly} is set:
            {_teleport_randomly} isn't 0
            set {_teleport_randomly_nbt} to nbt from "{type:""minecraft:teleport_randomly""}"
            set float tag "diameter" of {_teleport_randomly_nbt} to {_teleport_randomly}
            add {_teleport_randomly_nbt} to {_death_effects::*}
        
        # set death protection
        if {_death_effects::*} is set:
            set compound list tag "death_effects" of {_death_protection_nbt} to {_death_effects::*}
        set compound tag "minecraft:death_protection" of vanilla nbt of {_item} to {_death_protection_nbt}
    
    # jukebox playable
    if yaml value "%{_path}%.jukebox_playable" of {_yaml} is set:
        set {_jukebox_playable_nbt} to empty nbt compound
        
        # song
        set {_song} to getNamespaced({_path}, {_yaml}, "jukebox_playable.song", {_item})
        if {_song} is set:
            set string tag "song" of {_jukebox_playable_nbt} to {_song}
        else:
            exit 2 sections
                
        # show in tooltip
        set {_show_in_tooltip} to getBoolean({_path}, {_yaml}, "jukebox_playable.show_in_tooltip", {_item})
        if {_show_in_tooltip} is set:
            set boolean tag "show_in_tooltip" of {_jukebox_playable_nbt} to {_show_in_tooltip}
                
        # set jukebox playable
        set {_item} to setNbt({_item}, compound tag, "minecraft:jukebox_playable", {_jukebox_playable_nbt})
    
    # finalize custom item
    set {-customItems::%{_fullid}%} to {_item}
    log debug "Loaded custom item &a%{_fullid}%"


local function loadYaml(yaml:string):
    loop all yaml nodes of {_yaml}:
        loop yaml node list "%loop-value%.items" of {_yaml}:
            set {_item} to last element of (loop-value-2 split by ".")
            loadItem(loop-value-1, {_item}, {_yaml})

on load:
    clear {-customItems::*}
    log info "‍🔥 Loading custom items..."
    loop all recursive files in "plugins/Skript/scripts/customItems/yamls":
        load yaml loop-file as loop-file
        loadYaml(loop-file)
    customItemsUpdateAllRecipes()
